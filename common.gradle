apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: '../dependencies.gradle'
apply from: '../shared_dependencies.gradle'
apply from: '../shared_test_dependencies.gradle'
apply from: '../sharedProperties.gradle'


// Loading key store credentials file
def keystorePropertiesFile = rootProject.file("keyStore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// Loading private app properties
def appFile = rootProject.file("appProperties.properties")
def appProperties = new Properties()
appProperties.load(new FileInputStream(appFile))


// Generates Version Code based on date & Time
static def getVersionCode(offset = 0) {
    def formattedDate = new Date().format('yyMMddHH')
    return formattedDate.toInteger() + offset
}

android {
    compileSdkVersion app.compileSdkVersion
    buildToolsVersion app.buildToolsVersion
    defaultConfig {
        minSdkVersion app.minSdkVersion
        targetSdkVersion app.targetSdkVersion
        versionCode getVersionCode()
        versionName app.applicationVersionName
        testApplicationId app.applicationId
        resValue "string", "app_name", "TV Series Finder"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [deepLinkScheme: appProperties['deepLinkScheme'],
                                deepLinkHost  : appProperties['deepLinkHost']]
        // to fix some compiling errors for roboelectric library
        javaCompileOptions.annotationProcessorOptions.includeCompileClasspath = true

    }


    kotlinOptions {
        jvmTarget = "1.8"
    }

    testOptions {
//        reportDir "$rootDir/test-reports"
//        resultsDir "$rootDir/test-results"
        unitTests {
            includeAndroidResources true
        }
    }

    compileOptions {
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    flavorDimensions 'version', 'region'
    productFlavors {
        eu {
            dimension = "region"
            resValue "string", "app_name", "TV Maze"
        }

        usa {
            dimension = "region"
            resValue "string", "app_name", "TV Maze Client"
        }

        development {
            dimension = "version"
            resConfigs "en", "xxhdpi"
//            resValue "string", "app_name", "Development Project x"
            manifestPlaceholders = [deepLinkScheme: "projectxdevscheme", deepLinkHost: "deep.project.x"]
//            applicationId app.applicationId
//            versionCode 1
//            versionName '1.0.0'
        }
        play {
            dimension = "version"
            manifestPlaceholders = [deepLinkScheme: "projectxdevscheme", deepLinkHost: "deep.project.x"]
//            resValue "string", "app_name", "Project x"
//            applicationId app.applicationId
//            versionCode 1
//            versionName '1.0.0'
        }
    }

//     Travers through different flavors and do some operations like ignoring unwanted flavors
//     or adding some configuration stuff into that like build config, resValues, etc.
    variantFilter { variant ->
        def names = variant.flavors*.name
        // To check for a build type instead, use variant.buildType.name == "buildType"
        if (names.contains("demo") || names.contains("mena")) {
            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
    }

    // Sign in credentials
    // To change Sign in credentials go to keyStore.properties
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            buildConfigField("String", "BASE_URL", "${appProperties['releaseBaseUrl']}")
        }
        debug {
            buildConfigField("String", "BASE_URL", "${appProperties['debugBaseUrl']}")
//            ext.alwaysUpdateBuildId = false
            debuggable true
        }
    }

}